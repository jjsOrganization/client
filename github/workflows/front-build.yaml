name: Front Deployment with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch

jobs:
  build:
    name: Docker Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout GitHub Action
        uses: actions/checkout@v3
      
      # Docker 이미지를 빌드하고 캐시합니다.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-react-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-react-app
      
      # AWS에 접근하기 위한 권한을 설정합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRETKEY }}
          aws-region: ap-northeast-2
      
      # Docker 컨테이너에서 정적 파일을 추출하여 S3에 업로드합니다.
      - name: Upload to S3
        env:
          BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: |
          docker create --name extract my-react-app:latest
          docker cp extract:/usr/src/app/build ./build
          docker rm extract
          aws s3 sync ./build s3://$BUCKET_NAME

      # CloudFront 캐시를 무효화합니다.
      - name: CloudFront Invalidation
        env:
          CLOUD_FRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUD_FRONT_ID --paths /*